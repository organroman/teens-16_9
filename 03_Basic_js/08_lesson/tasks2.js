/**
 * –ó–∞–¥–∞–Ω–∏–µ 1.
 *
 * –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-—Å—É–º–º–∞—Ç–æ—Ä.
 *
 * –§—É–Ω–∫—Ü–∏—è –æ–±–ª–∞–¥–∞–µ—Ç –¥–≤—É–º—è —á–∏—Å–ª–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ö —Å–ª–æ–∂–µ–Ω–∏—è.
 *
 * –£—Å–ª–æ–≤–∏—è:
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ç–∏–ø–∞ arrow function;
 * - –ù–∞–ø–∏—Å–∞—Ç—å –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–≤—É—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
 */

// const sum = (a, b) => a + b;
// console.log(sum(20, 124000));

// const sum2 = (a, b) => {
//   const isAmoreB = a > b;

//   if (isAmoreB) {
//     return a + b;
//   } else return b - a;
// };
// console.log("üöÄ ~ sum2:", sum2(2, 3))

/*
 * –ù–∞–ø–∏—Å–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ö.
 *
 * –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å —á–µ—Ç—ã—Ä–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
 * - –°–ª–æ–∂–µ–Ω–∏–µ (add);
 * - –í—ã—á–∏—Ç–∞–Ω–∏–µ (subtract);
 * - –£–º–Ω–æ–∂–µ–Ω–∏–µ (multiply);
 * - –î–µ–ª–µ–Ω–∏–µ (divide).
 *
 * –ö–∞–∂–¥—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
 * –ö–∞–∂–¥–∞—è —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–ª–∞–¥–∞–µ—Ç –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏-–æ–ø–µ—Ä–∞–Ω–¥–∞–º–∏,
 * –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–∏–º–∏.
 *
 * –≠—Ç–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è calculate,
 * –∫–æ—Ç–æ—Ä–∞—è –æ–±–ª–∞–¥–∞–µ—Ç —Ç—Ä–µ–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
 * - –ü–µ—Ä–≤—ã–π ‚Äî —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø, –ø–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥;
 * - –í—Ç–æ—Ä–æ–π ‚Äî —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø, –≤—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥;
 * - –¢—Ä–µ—Ç–∏–π ‚Äî —Ñ—É–Ω–∫—Ü–∏—é, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
 *
 * –£—Å–ª–æ–≤–∏—è:
 * - –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ;
 * - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω ¬´callback¬ª.
 */
// const add = (a, b) => a + b;
// const subtract = (a, b) => a - b;
// const multiply = (a, b) => a * b;
// const divide = (a, b) => a / b;

// const calculate = (a, b, callBack) => callBack(a, b);
// console.log ("add", calculate(20, 50, add));
// console.log("subtract", calculate(50, 20, subtract));
// console.log("multiply", calculate(50, 20, multiply));
// console.log("divide", calculate(50, 20, divide));

// –ó–∞–ø–∏—Ç–∞–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–º‚Äô—è, –ø—Ä—ñ–∑–≤–∏—â–µ, –≤—ñ–∫ (–ø–µ—Ä–µ–≤—ñ—Ä, —â–æ —Ü–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ
// —Ç–∞ —â–æ –≤—ñ–∫ –≤—ñ–¥ 15 –¥–æ 100 —Ä–æ–∫—ñ–≤), —á–∏ —î –¥—ñ—Ç–∏, —Ç–∞ —è–∫–æ–≥–æ –∫–æ–ª—å–æ—Ä—É –æ—á—ñ.
// –£—Å—ñ —Ü—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–∏ –≤ –æ–±‚Äô—î–∫—Ç—ñ.
// –ü–µ—Ä–µ–±–µ—Ä–∏ –æ–±‚Äô—î–∫—Ç —ñ –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ñ—Ä–∞–∑–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
// `–í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å ${–∫–ª—é—á}: ${–∑–Ω–∞—á–µ–Ω–Ω—è}` ‚Äî –¥–ª—è –∫–æ–∂–Ω–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ.

const person = {};

person.firstName = prompt("–Ø–∫ –≤–∞—Å –∑–≤—É—Ç—å?");
person.lastName = prompt("–Ø–∫–∞ –≤–∞—à–∞ –ø—Ä–∏–∑–≤—ñ—â–µ?");

let age;

do {
  age = +prompt("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ –≤—ñ–¥ 15 –¥–æ 100");
} while (Number.isNaN(age) || age < 15 || age > 100);

person.age = age;

let hasChildren = prompt("–£ –≤–∞—Å —î –¥—ñ—Ç–∏?");

if (hasChildren === "–¢–∞–∫") {
  person.hasChildren = true;
} else {
  person.hasChildren = false;
}
person.colorEyes = prompt("–Ø–∫–∏–π –≤–∞—Å –∫–æ–ª—ñ—Ä –æ—á–µ–π?");

for (let key in person) {
  console.log(`–í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å ${key}:${person[key]}`);
}
